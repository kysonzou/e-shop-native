// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/kyson/e-shop-native/internal/user-srv/auth"
	"github.com/kyson/e-shop-native/internal/user-srv/biz"
	"github.com/kyson/e-shop-native/internal/user-srv/data"
	"github.com/kyson/e-shop-native/internal/user-srv/service"
	"github.com/kyson/e-shop-native/internal/user-srv/sever"
	"github.com/kyson/e-shop-native/internal/user-srv/validator"
)

// Injectors from wire.go:

func InitializeApp() (*App, func(), error) {
	bootstrap, err := LoadConfig()
	if err != nil {
		return nil, nil, err
	}
	server := ProvideServerConfig(bootstrap)
	confData := ProvideDataConfig(bootstrap)
	dataData, cleanup, err := data.NewData(confData)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData)
	userValidator, err := validator.NewValidator()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	passwordHash := biz.NewBcrypt()
	userService := biz.NewUserUsecase(userRepo, userValidator, passwordHash)
	confAuth := ProvideAuthConfig(bootstrap)
	authAuth, err := auth.NewAuth(confAuth)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userServiceServer := service.NewUserService(userService, authAuth)
	businessGRPCServer := sever.NewGRPCServer(server, userServiceServer, authAuth)
	businessHTTPServer := sever.NewHTTPServer(server)
	log := ProvideLogConfig(bootstrap)
	logger, err := NewLogger(log)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	adminHTTPServer := sever.NewAdminServer(server)
	app := NewApp(businessGRPCServer, businessHTTPServer, server, confData, logger, adminHTTPServer)
	return app, func() {
		cleanup()
	}, nil
}
